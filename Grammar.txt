Program -> program identifier ; Globals Block .

Globals -> Constats Globals
Globals -> Variables Globals
Globals -> Procedure Globals
Globals -> Function Globals
Globals ->

Constants -> const SingleConstant MoreConstants
MoreConstants -> SingleConstant MoreConstants
MoreConstants ->
SingleConstant -> identifier = Expr ;

Variables -> var SingleVariable MoreVariables
MoreVariables -> SingleVariable MoreVariables
MoreVariables ->
SingleVariable -> IdentifierList : Type ;

IdentifierList -> identifier
MoreIdentifierList -> , identifier MoreIdentifierList
MoreIdentifierList ->

Procedure -> procedure identifier Parameters ; Body
Function -> function identifier Parameters : Type ; Body

Parameters -> ( SingleParameter MoreParameters )
Parameters ->
MoreParameters -> , SingleParameter MoreParameters
MoreParameters ->
SingleParameter -> IdentifierList : Type

Body -> forward ;
Body -> ManyVariables Block ;

ManyVariables -> Variables ManyVariables
ManyVariables ->

Block -> begin Stat Stats end
Stats -> ; Stat Stats
Stats ->

Stat -> identifier StatID
Stat -> Block
Stat -> If
Stat -> While
Stat -> For
Stat ->

StatId -> := Expr
StatId -> [ Expr ] := Expr
StatId -> ( Arguments )

If -> if Expr then Stat Else_p

While -> while Expr do Stat

For -> for identifier := Expr ForDir Expr do Stat

ForDir -> to
ForDir -> downto

Else_p -> else Stat
Else_p ->

Arguments -> Expr MoreArguments
Arguments->
MoreArguments -> , Expr MoreArguments
MoreArguments->

Expr -> SimpleExpr
# = <> < > <= >=
MoreExpr -> = SimpleExpr
MoreExpr ->

SimpleExpr -> Term MoreSimpleExpr
# + - or xor
MoreSimpleExpr -> + Term MoreSimpleExpr
MoreSimpleExpr ->

Term -> Factor MoreTerm
# * / div mod and
MoreTerm -> * Factor MoreTerm
MoreTerm ->

Factor -> identifier FactorId
Factor -> constant
Factor -> ( Expr )
Factor -> not Factor
Factor -> + Factor
Factor -> - Factor

FactorId -> [ Expr ]
FactorId -> ( Arguments )
FactorId ->

Type -> array [ Expr .. Expr ] of Type
Type -> integer
Type -> boolean
